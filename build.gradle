plugins {
	id 'java'
	id 'org.springframework.boot' version '2.5.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.mycompany'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

jacoco {
	toolVersion = "0.8.6"
	reportsDirectory = layout.buildDirectory.dir("reports/jacoco")
}

repositories {
	jcenter()
	mavenCentral()
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				minimum = 0.8
			}
		}
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'javax.persistence:javax.persistence-api:2.2'
	implementation 'org.projectlombok:lombok:1.18.22'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.zaxxer:HikariCP:3.4.5'
	implementation 'org.hibernate:hibernate-core:5.5.6.Final'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	implementation 'com.h2database:h2:2.2.220'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	implementation 'org.mindrot:jbcrypt:0.4'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2:2.2.220'
	testImplementation 'org.mockito:mockito-core:3.11.2'
	testImplementation 'org.mockito:mockito-junit-jupiter:3.11.2'
}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}


tasks.named('jacocoTestReport') {
	dependsOn test
	reports {
		xml.enabled false
		csv.enabled false
		html.enabled true
	}

	classDirectories.setFrom(files(classDirectories.files.collect {
		fileTree(dir: it, exclude: [
				'**/com/mycompany/signupservice/config/**',
				'**/com/mycompany/signupservice/dto/**',
				'**/com/mycompany/signupservice/exception/**',
				'**/com/mycompany/signupservice/mapper/**',
				'**/com/mycompany/signupservice/security/JwtAuthenticationFilter.*',
				'**/com/mycompany/signupservice/SignupServiceApplication.*'
		])
	}))
}

tasks.named('build') {
	dependsOn 'jacocoTestCoverageVerification'
}
